{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/multiple-blog-types/","result":{"data":{"site":{"siteMetadata":{"title":"Justinor.dev"}},"markdownRemark":{"id":"6be9cea4-afd4-5398-878e-b0512a3f9c40","excerpt":"is was very confusing for me to use at first, but with the  tool available during , I found that I could quickly learn how it works as I used it more and more…","html":"<p><code class=\"language-text\">graphql</code> is was very confusing for me to use at first, but with the <code class=\"language-text\">___graphql</code> tool available during <code class=\"language-text\">gatsby develop</code>, I found that I could quickly learn how it works as I used it more and more. One of the issues I came across lately was trying to maintain two different markdown folders for blogs and projects respectively.</p>\n<p>From my research, I found another guide on how to do this, but their guide was for gatsby version 1, and I found that the requirement of providing metadata for project markdown files was a bit redundant, as you will see below. So here is my guide for creating a projects folder for your project markdown files to be serve on gatsby.</p>\n<h1 id=\"criteria\" style=\"position:relative;\"><a href=\"#criteria\" aria-label=\"criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Criteria</h1>\n<ul>\n<li>You are using a set up similar to the the <a href=\"https://www.gatsbyjs.com/starters/gatsbyjs/gatsby-starter-blog/\">gatsby starter blog</a>.</li>\n<li>You want a file structure like this</li>\n</ul>\n<deckgo-highlight-code   >\n          <code slot=\"code\">src\n├── content\n│   ├── blog\n│   │   ├── blog1\n│   │   │   └── index.md\n│   │   └── blog2\n│   │       └── index.md\n│   └── projects\n│       ├── project1\n│       │   └── index.md\n│       └── project2\n│           └── index.md\n└── src\n    └── templates\n        ├── BlogPost.tsx\n        └── ProjectPost.tsx</code>\n        </deckgo-highlight-code>\n<p>Thats it! (nothing redundant like requiring a field to be added to each projects’ <code class=\"language-text\">index.md</code>…)</p>\n<h1 id=\"setting-up-gatsby\" style=\"position:relative;\"><a href=\"#setting-up-gatsby\" aria-label=\"setting up gatsby permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up Gatsby</h1>\n<p>In <code class=\"language-text\">gatsby-config.js</code>, add the following code in the plugins array:</p>\n<deckgo-highlight-code language=\"js\"  >\n          <code slot=\"code\">  plugins: [\n    ...\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `${__dirname}/content/projects`,\n        name: `projects`,\n      },\n    },\n    ...\n  ]</code>\n        </deckgo-highlight-code>\n<p>Next, in <code class=\"language-text\">gatsby-node.js</code>, we don’t need to change the graphql query at all! Instead, we need to conditionally create pages and nodes based on the path to the markdown files!</p>\n<p>Assuming your graphql takes the <code class=\"language-text\">fileAbsolutePath</code> field from <code class=\"language-text\">allMarkdownRemark / edges / nodes</code> like so:</p>\n<deckgo-highlight-code language=\"js\"  >\n          <code slot=\"code\">const result = await graphql(\n  `\n    {\n      allMarkdownRemark(\n        sort: { fields: [frontmatter___date], order: DESC }\n        limit: 1000\n      ) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            fileAbsolutePath\n            frontmatter {\n              title\n              tags\n            }\n          }\n        }\n      }\n    }\n  `,\n);</code>\n        </deckgo-highlight-code>\n<p>Then we can simply check this property to figure out whether to render this as a blog post or as a project post!</p>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">exports.createPages = async ({ graphql, actions }) =&gt; {\n  const blogPost = path.resolve(`./src/templates/BlogPost.tsx`);\n  const tagPage = path.resolve(`./src/templates/TagsPage.tsx`);\n  const projectPost = path.resolve(`./src/templates/ProjectPost.tsx`);\n\n  /* graphql query from above goes here */\n\n  if (result.errors) {\n    throw result.errors;\n  }\n\n  // Create blog posts pages.\n  const posts = result.data.allMarkdownRemark.edges;\n\n  posts.forEach((post, index) =&gt; {\n    const previous = index === posts.length - 1 ? null : posts[index + 1].node;\n    const next = index === 0 ? null : posts[index - 1].node;\n\n    createPage({\n      path: post.node.fields.slug,\n      component: /blog/.test(post.node.fileAbsolutePath)\n        ? blogPost\n        : projectPost,\n      context: {\n        slug: post.node.fields.slug,\n        previous,\n        next,\n      },\n    });\n  });\n};</code>\n        </deckgo-highlight-code>\n<p>Finally, to ensure slugs get properly created, we need to use <code class=\"language-text\">createFilePath</code> to create the slugs for the above command conditionally like so:</p>\n<deckgo-highlight-code language=\"js\"  >\n          <code slot=\"code\">exports.onCreateNode = ({ node, actions, getNode }) =&gt; {\n  const { createNodeField } = actions;\n\n  if (node.internal.type === `MarkdownRemark`) {\n    const value = createFilePath({ node, getNode });\n    createNodeField({\n      name: `slug`,\n      node,\n      value: `/${\n        /blog/.test(node.fileAbsolutePath) ? &#39;blog&#39; : &#39;projects&#39;\n      }${value}`,\n    });\n  }</code>\n        </deckgo-highlight-code>\n<h2 id=\"hooking-up-the-frontend\" style=\"position:relative;\"><a href=\"#hooking-up-the-frontend\" aria-label=\"hooking up the frontend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooking up the frontend</h2>\n<p>This is most of the “backend” work done, and the rest of the work consists of using this data. You can probably reuse the code examples given in the first resource I have linked below, or check out the <a href=\"https://github.com/xpire/website/tree/master/src/templates\">source code for this blog you’re reading right now</a>. The harder part in my opinion was knowing how to use the absolute path in graphql in the page creation phase, as I really disliked having to label the <code class=\"language-text\">projects</code> markdown pages with an explicit field when I have already put it in its own folder.</p>\n<h2 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h2>\n<ul>\n<li><a href=\"https://desktopofsamuel.com/building-gatsby-with-multiple-post-type\">building gatsby with multiple post types</a></li>\n<li><a href=\"https://chipcullen.com/making-multiple-content-types-in-gatsby/\">making multiple content types in gatsby</a></li>\n</ul>","frontmatter":{"title":"Multiple blog types in Gatsby","date":"September 06, 2020","description":"How I configured blogs and project pages written in markdown to show on their respective pages","tags":["gatsby"]},"headings":[{"depth":1,"id":"criteria","value":"Criteria"},{"depth":1,"id":"setting-up-gatsby","value":"Setting up Gatsby"},{"depth":2,"id":"hooking-up-the-frontend","value":"Hooking up the frontend"},{"depth":2,"id":"resources","value":"Resources"}]}},"pageContext":{"slug":"/blog/multiple-blog-types/","previous":{"fields":{"slug":"/blog/the-perils-of-web-dev/"},"fileAbsolutePath":"/home/xpirep/uni/website/content/blog/the-perils-of-web-dev/index.md","frontmatter":{"title":"The Quest for a cool header design","tags":["frontend","gatsby"]}},"next":null}}}